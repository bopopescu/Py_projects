python -m pytest -v

2) Run tests by substring matching
pytest -k method2 -v

2) Run tests by markers @pytest.mark
pytest -m set1

3) parallel test
pytest -n 4 -v

4) @pytest.fixture

5) define @pytest.fixture in  conftest.py so multiple test_.py
can use it

6) Parameterized tests
@pytest.mark.parametrize("input1, input2, output",[(5,5,10),(3,5,12)])

7) Xfail / Skip tests

execute tests with recording either pass or fail status
@pytest.mark.xfail

completely skip test
@pytest.mark.skip


_____________________________________________________
Summary
In this pytest tutorial, we covered

Install pytest using pip install pytest=2.9.1
Simple pytest program and run it with py.test command.
Assertion statements, assert x==y, will return either True or False.
How pytest identifies test files and methods.
Test files starting with test_ or ending with _test
Test methods starting with test
py.test command will run all the test files in that folder and subfolders. To run a specific file, we can use the command py.test <filename>
Run a subset of test methods
Grouping of test names by substring matching.
py.test -k <name> -v will run all the tests having <name> in its name.
Run test by markers.Mark the tests using @pytest.mark.<name> and run the tests using pytest -m <name> to run tests marked as <name>.
Run tests in parallel
Install pytest-xdist using pip install pytest-xdist
Run tests using py.test -n NUM where NUM is the number of workers
Creating fixture methods to run code before every test by marking the method with @pytest.fixture
The scope of a fixture method is within the file it is defined.
A fixture method can be accessed across multiple test files by defining it in conftest.py file.
A test method can access a fixture by using it as an input argument.
Parametrizing tests to run it against multiple set of inputs.
@pytest.mark.parametrize("input1, input2, output",[(5,5,10),(3,5,12)]) def test_add(input1, input2, output):
assert input1+input2 == output,"failed"
will run the test with inputs (5,5,10) and (3,5,12)
Skip/xfail tests using @pytets.mark.skip and @pytest.mark.xfail
Create test results in XML format which covers executed test details using py.test test_sample1.py -v --junitxml="result.xml"
A sample pytest framework to test an API
___________________________________________________________

