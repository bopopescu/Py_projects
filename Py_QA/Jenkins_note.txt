

C:\Program Files (x86)\Microsoft Visual Studio 12.0\Common7\IDE>MSTest.exe 
/testcontainer:"C:\Program Files (x86)\Jenkins\jobs\Build.ExampleProj\workspace\source\ExampleProj \bin\Release\ExampleProj.Tests.dll" 
/resultsfile:"C:\Program Files (x86)\Jenkins\jobs\Build.ExampleProj\workspace\source\Build\Tests.Results.trx"

<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="ExecuteMSTest" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    
    <PropertyGroup>
        <MsTestExePath>C:\Program Files (x86)\Microsoft Visual Studio 10.0\Common7\IDE\mstest.exe</MsTestExePath>
        <MsTestResultPath>$(WORKSPACE)\MyResults.trx</MsTestResultPath>
        <Configuration>Release</Configuration>
    </PropertyGroup>

    <Target Name="ExecuteMSTest">

        <ItemGroup>
            <MSTestAssemblies Include="$(WORKSPACE)\**\bin\$(Configuration)\*.Test.dll"/>
        </ItemGroup>

        <PropertyGroup>
            <MsTestCommand>"$(MsTestExePath)" @(MSTestAssemblies->'/testcontainer:"%(FullPath)"', ' ') /resultsfile:"TestResults\Results.trx""</MsTestCommand>
        </PropertyGroup>
   
        <Exec Command="$(MsTestCommand)" ContinueOnError="true" />

    </Target>

</Project>

Obtain a clean copy of the source code from source control.
Fetch any dependencies (preferably from an artifact repository).
Version stamp any necessary code (may be a pre-compile or post-compile step, depending on the technology stack).
Compile the source code and verify syntax.
Execute unit tests (unit-based validation of objects, methods, and classes).
Collate compiled objects, binaries, or deliverables into a common output directory.
Create a package containing the binaries and deliverables.
Publish a versioned deliverable to an artifact repository.

Is the source control system accessible to the build machine and appropriate users?
Does the code contained in source control meet basic structural standards?
Does the source code committed to the code base compile at the time build was initiated, or does it have any obvious syntax errors?
Is the build environment in a working state?
Does the software pass basic unit test execution?
Is the pre-production and production environments in a usable state
Does the software project install?
Does the software project meet quality assurance standards

The final deployable package will contain everything necessary to install the component or software project onto a given environment (this can make disaster recovery easier)
The final deployable package will contain all testing apparatuses and database schema scripts needed to pass quality control gates (this makes going back in time and running tests against an older package possible)
The software project could be easily be rolled backwards or forwards (by simply executing the automation inside a versioned package)

Dockerfile
