#11/27/2019
#1/6/2020

#Linux version
curl -X POST -H "Content-Type: application/json" localhost:8000/api/articles/ -d '{"title": "Run Post Test", "description": "First Trial", "body": "Running 2 tests", "author_id": 11}'
#windows version
curl -X POST -H "Content-Type: application/json" localhost:8000/api/subscriber -d "{\"name\": \"4378 Station\", \"age\": 2, \"email\": \"4378@litepoint.com\"}"  

#@@ 1. GET 
#1.0)
# i option to show HTTP header
curl    http://localhost:8000/drone-categories/  | jq
curl -i http://localhost:8000/drone-categories/

test_master@jsun-mbpw10:~$ http ":8000/drone-categories/"
HTTP/1.0 200 OK
Allow: GET, POST, HEAD, OPTIONS
Content-Length: 427
Content-Type: application/json
Date: Tue, 15 Oct 2019 18:23:28 GMT
Server: WSGIServer/0.2 CPython/3.7.2
Vary: Accept, Cookie
X-Frame-Options: SAMEORIGIN

{
    "count": 2,
    "next": null,
    "previous": null,
    "results": [
        {
            "drones": [
                "http://localhost:8000/drones/5",
                "http://localhost:8000/drones/4",
                "http://localhost:8000/drones/1"
            ],
            "name": "Octocopter",
            "pk": 1,
            "url": "http://localhost:8000/drone-categories/1"
        },
        {
            "drones": [
                "http://localhost:8000/drones/6",
                "http://localhost:8000/drones/2",
                "http://localhost:8000/drones/3"
            ],
            "name": "Quadcopter",
            "pk": 2,
            "url": "http://localhost:8000/drone-categories/2"
        }
    ]
}

# 1.1)
test_master@jsun-mbpw10:~$ http ":8000/drone-categories/1"
HTTP/1.0 200 OK
Allow: GET, PUT, PATCH, DELETE, HEAD, OPTIONS
Content-Length: 187
Content-Type: application/json
Date: Tue, 15 Oct 2019 18:24:20 GMT
Server: WSGIServer/0.2 CPython/3.7.2
Vary: Accept, Cookie
X-Frame-Options: SAMEORIGIN

{
    "drones": [
        "http://localhost:8000/drones/5",
        "http://localhost:8000/drones/4",
        "http://localhost:8000/drones/1"
    ],
    "name": "Octocopter",
    "pk": 1,
    "url": "http://localhost:8000/drone-categories/1"

#@@ 2.POST
#2.1
test_master@jsun-mbpw10:~$ http POST ":8000/drone-categories/" name='Hexocopter'
HTTP/1.0 201 Created
Allow: GET, POST, HEAD, OPTIONS
Content-Length: 89
Content-Type: application/json
Date: Tue, 15 Oct 2019 18:30:34 GMT
Location: http://localhost:8000/drone-categories/3
Server: WSGIServer/0.2 CPython/3.7.2
Vary: Accept, Cookie
X-Frame-Options: SAMEORIGIN

{
    "drones": [],
    "name": "Hexocopter",
    "pk": 3,
    "url": "http://localhost:8000/drone-categories/3"
} 
#2.2 
# curl, always include -H "Content-Type: application/json"

curl -iX POST -H "Content-Type: application/json" -d '{"name":"Fortnite", "release_date": "2017-05-18T03:02:00.776594Z"}' "localhost:8000/games/"
curl -iX POST localhost:8000/drone-categories/ -H "Content-Type: application/json" -d '{"name": "Geocopter"}'
HTTP/1.0 201 Created
Date: Tue, 15 Oct 2019 18:38:55 GMT
Server: WSGIServer/0.2 CPython/3.7.2
Content-Type: application/json
Location: http://localhost:8000/drone-categories/5
Vary: Accept, Cookie
Allow: GET, POST, HEAD, OPTIONS
X-Frame-Options: SAMEORIGIN
Content-Length: 88

#@@ 3.PUT
#// PUT: updates the existing one with a new instance.
test_master@jsun-mbpw10:~$ curl -iX PUT -H "Content-Type: application/json" -d '{"name": "Xyenocopter"}' localhost:8000/drone-categories/6
curl -iX PUT -H "Content-Type: application/json" -d '{"name": "Xyenocopter"}' localhost:8000/drone-categories/6

HTTP/1.0 200 OK
Date: Tue, 15 Oct 2019 18:58:33 GMT
Server: WSGIServer/0.2 CPython/3.7.2
Content-Type: application/json
Vary: Accept, Cookie
Allow: GET, PUT, PATCH, DELETE, HEAD, OPTIONS
X-Frame-Options: SAMEORIGIN
Content-Length: 90

#//
test_master@jsun-mbpw10:~$ http PUT ":8000/drone-categories/6" name="Zobieocopter"
HTTP/1.0 200 OK
Allow: GET, PUT, PATCH, DELETE, HEAD, OPTIONS
Content-Length: 91
Content-Type: application/json
Date: Tue, 15 Oct 2019 19:01:16 GMT
Server: WSGIServer/0.2 CPython/3.7.2
Vary: Accept, Cookie
X-Frame-Options: SAMEORIGIN

{
    "drones": [],
    "name": "Zobieocopter",
    "pk": 6,
    "url": "http://localhost:8000/drone-categories/6"
}

#@@ 4.  PATCH
#//PATCH
curl -iX PATCH -H "Content-Type: application/json" -d '{"name": "CurlPatchOcopter"}' localhost:8000/drone-categories/6
http PATCH ":8000/drone-categories/6" name="ZPATCHEDocopter"
HTTP/1.0 200 OK
Allow: GET, PUT, PATCH, DELETE, HEAD, OPTIONS
Content-Length: 94
Content-Type: application/json
Date: Tue, 15 Oct 2019 20:23:06 GMT
Server: WSGIServer/0.2 CPython/3.7.2
Vary: Accept, Cookie
X-Frame-Options: SAMEORIGIN

{
    "drones": [],
    "name": "ZPATCHEDocopter",
    "pk": 6,
    "url": "http://localhost:8000/drone-categories/6"
}

#@@ 5. DELETE
#5.1
http DELETE :8000/drone-categories/7

HTTP/1.0 204 No Content
Allow: GET, PUT, PATCH, DELETE, HEAD, OPTIONS
Content-Length: 0
Date: Tue, 15 Oct 2019 20:28:33 GMT
Server: WSGIServer/0.2 CPython/3.7.2
Vary: Accept, Cookie
X-Frame-Options: SAMEORIGIN


#5.2
curl -iX DELETE localhost:8000/drone-categories/8
HTTP/1.0 204 No Content
Date: Tue, 15 Oct 2019 20:30:06 GMT
Server: WSGIServer/0.2 CPython/3.7.2
Vary: Accept, Cookie
Allow: GET, PUT, PATCH, DELETE, HEAD, OPTIONS
X-Frame-Options: SAMEORIGIN
Content-Length: 0

//Linux environment
curl -X POST -H "Content-Type: application/json" localhost:8000/todos \
       -d '{"title": "Wash the car", "order": 2}'

curl -s localhost:8000/todos | jq

> curl -X PATCH -H "Content-Type: application/json" localhost:8000/todos/2 \
       -d '{"completed": true}'

 

 
####@@ Docker AWS
@@Dokcer
Docker Compose: This allows you to orchestrate and run multi-container environments both locally and on Docker Swarm clusters

Git: This is required to fork and clone the sample application from GitHub and create your own Git repositories for the various 
applications and environments you will create in this book
GNU Make 3.82 or higher: This provides task automation, allowing you run simple commands (for example, make test) to execute a given task
jq: A command-line utility for parsing JSON
curl: A command-line HTTP client
tree: A command-line client for displaying folder structures in the shell
Python interpreter: This is required for Docker Compose and the AWS Command-Line Interface (CLI) tool that we will install in a later chapter
pip: A Python package manager for installing Python applications such as the AWS CLI

## Remove old Docker

## Application
## Install Dependency
pip3 install -r requirements.txt --user

##
# retrive souce code of a webpage
src> curl localhost:8000
{"todos":"http://localhost:8000/todos"}

## -o
# save output to a file
curl -o vue-v2.5.16.js https://cdn.jsdelivr.net/npm/vue/dist/vue.js
# Uppercase -O will save the file with its original filename:
curl -O https://cdn.jsdelivr.net/npm/vue/dist/vue.js

##
The -I option allows you to fetch only the HTTP headers, no content 
of the specified resource:
curl -I https://www.ubuntu.com

## include header: -i and content
curl -i https://www.ubuntu.com

## -L follow redirect
 curl -L google.com

## -X
curl -X GET http://example.com -I

## -X GET. The -X signifies the method used for the request. 
Common options are GET, POST, DELETE, PUT.

## -H : submit the request header
## -d : data

curl -X POST -H "Content-Type: application/json" localhost:8000/todos -d '{"title": "Wash the car", "order": 2}'
       
#Linux version
curl -X POST -H "Content-Type: application/json" localhost:8000/api/articles/ -d '{"title": "Run Post Test", "description": "First Trial", "body": "Running 2 tests", "author_id": 11}'
#windows version
curl -X POST -H "Content-Type: application/json" localhost:8000/api/subscriber -d "{\"name\": \"4378 Station\", \"age\": 2, \"email\": \"4378@litepoint.com\"}"      


## 
curl -s localhost:8000/todos | jq

## curl -X PATCH -H "Content-Type: application/json" localhost:8000/todos/1 \
    -d '{"completed": true}'

## curl -X POST -H "Content-Type: application/json" localhost:8000/todos \
    -d '{"title": "Walk the dog", "completed": false, "order": 1}'
[
  {
    "url": "http://localhost:8000/todos/1",
    "title": "Wash the car",
    "completed": true,
    "order": 2
  },
  {
    "url": "http://localhost:8000/todos/2",
    "title": "Walk the dog",
    "completed": false,
    "order": 1
  }
]

##
$ python3 manage.py test --settings todobackend.settings_test

ssqa@ssqa:~/Documents/Docker_AWS/proj_1/todobackend/src$ python3 manage.py test --settings todobackend.settings_test

@@ Build applications with Docker
